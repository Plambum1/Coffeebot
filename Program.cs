using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using System.Threading;

class Program
{
    static async Task Main()
    {
        string? botToken = Environment.GetEnvironmentVariable("BOT_TOKEN");

        if (string.IsNullOrWhiteSpace(botToken))
        {
            Console.WriteLine("‚õî BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        var botClient = new TelegramBotClient(botToken);

        var me = await botClient.GetMeAsync();
        Console.WriteLine($"‚úÖ –ë–æ—Ç @{me.Username} –∑–∞–ø—É—â–µ–Ω.");

        var cts = new CancellationTokenSource();

        var receiverOptions = new ReceiverOptions
        {
            AllowedUpdates = Array.Empty<UpdateType>()
        };

        Console.WriteLine("‚è≥ –ó–∞–ø—É—Å–∫ StartReceiving...");
        
        botClient.StartReceiving(
            updateHandler: HandleUpdateAsync,
            errorHandler: HandlePollingErrorAsync,
            receiverOptions: receiverOptions,
            cancellationToken: cts.Token
        );

        Console.WriteLine("‚úÖ StartReceiving –∑–∞–ø—É—â–µ–Ω.");

        await Task.Delay(-1); // –ß—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å
    }

    static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        if (update.Message is { } message)
        {
            Console.WriteLine($"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.Text} –æ—Ç {message.Chat.Id}");

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "–Ø –∂–∏–≤!",
                cancellationToken: cancellationToken
            );
        }
    }

    static Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ Polling: {exception.Message}");
        return Task.CompletedTask;
    }
}
