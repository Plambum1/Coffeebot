using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Npgsql;
using System.Collections.Concurrent;
using System.Globalization;

class Program
{
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    static string AdminPassword = "Igor123";
    static string? BotToken = Environment.GetEnvironmentVariable("BOT_TOKEN");
    static string? DatabaseUrl = Environment.GetEnvironmentVariable("DATABASE_URL");

    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    static TelegramBotClient? BotClient;

    // –•—Ä–∞–Ω–∏–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ç—É—Å—ã, —á—Ç–æ –∂–¥—ë–º)
    static ConcurrentDictionary<long, UserSession> Sessions = new();

    static async Task Main()
    {
        if (string.IsNullOrWhiteSpace(BotToken))
        {
            Console.WriteLine("‚õî BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        if (string.IsNullOrWhiteSpace(DatabaseUrl))
        {
            Console.WriteLine("‚õî DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        BotClient = new TelegramBotClient(BotToken);
        var me = await BotClient.GetMeAsync();
        Console.WriteLine($"‚úÖ –ë–æ—Ç @{me.Username} –∑–∞–ø—É—â–µ–Ω.");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        InitDb();

        // –ó–∞–ø—É—Å–∫–∞–µ–º Polling
        var cts = new CancellationTokenSource();
        var receiverOptions = new ReceiverOptions { AllowedUpdates = Array.Empty<UpdateType>() };
        BotClient.StartReceiving(
            HandleUpdateAsync,
            HandleErrorAsync,
            receiverOptions,
            cancellationToken: cts.Token
        );

        Console.WriteLine("‚úÖ StartReceiving –∑–∞–ø—É—â–µ–Ω (polling). –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...");
        await Task.Delay(-1);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    static void InitDb()
    {
        using var conn = new NpgsqlConnection(ConvertDatabaseUrlToConnectionString(DatabaseUrl!));
        conn.Open();
        using var cmd = conn.CreateCommand();
        cmd.CommandText = @"
            CREATE TABLE IF NOT EXISTS menu (
                key TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                price INTEGER NOT NULL
            );
            CREATE TABLE IF NOT EXISTS stats (
                date TEXT NOT NULL,
                coffee_key TEXT NOT NULL,
                payment TEXT NOT NULL,
                count INTEGER DEFAULT 0,
                revenue INTEGER DEFAULT 0,
                PRIMARY KEY (date, coffee_key, payment)
            );
        ";
        cmd.ExecuteNonQuery();
    }

    // –ü–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    static string ConvertDatabaseUrlToConnectionString(string databaseUrl)
    {
        var uri = new Uri(databaseUrl);
        var userInfo = uri.UserInfo.Split(':');
        return $"Host={uri.Host};Port={uri.Port};Username={userInfo[0]};Password={userInfo[1]};Database={uri.AbsolutePath.TrimStart('/')};SSL Mode=Require;Trust Server Certificate=true;";
    }

    // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–¥–µ–π—Ç–æ–≤
    static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        if (update.Message is { } message)
        {
            // –õ–æ–≥
            Console.WriteLine($"[Message] from {message.Chat.Id}: {message.Text}");

            long userId = message.Chat.Id;
            if (!Sessions.ContainsKey(userId))
                Sessions[userId] = new UserSession();
            var session = Sessions[userId];

            // –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
            var text = message.Text!.Trim();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            if (text == "/start")
            {
                await botClient.SendTextMessageAsync(
                    chatId: userId,
                    text: "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken
                );
                return;
            }

            // –ï—Å–ª–∏ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å
            if (session.AwaitingPassword)
            {
                session.AwaitingPassword = false;
                if (text == AdminPassword)
                {
                    await botClient.SendTextMessageAsync(
                        userId,
                        "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π!",
                        replyMarkup: GetAdminMenu(),
                        cancellationToken: cancellationToken
                    );
                }
                else
                {
                    await botClient.SendTextMessageAsync(
                        userId,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!",
                        cancellationToken: cancellationToken
                    );
                }
                return;
            }

            // –ï—Å–ª–∏ –∂–¥—ë–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫–æ—Ñ–µ
            if (session.AwaitingNewCoffee)
            {
                session.AwaitingNewCoffee = false;
                if (!text.Contains("-"))
                {
                    await botClient.SendTextMessageAsync(
                        userId,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞",
                        cancellationToken: cancellationToken
                    );
                    return;
                }

                var parts = text.Split('-', 2);
                var name = parts[0].Trim();
                if (!int.TryParse(parts[1].Trim(), out var price))
                {
                    await botClient.SendTextMessageAsync(
                        userId,
                        "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!",
                        cancellationToken: cancellationToken
                    );
                    return;
                }

                var key = name.ToLower().Replace(" ", "_");

                using var conn = new NpgsqlConnection(ConvertDatabaseUrlToConnectionString(DatabaseUrl!));
                conn.Open();
                using var cmd = conn.CreateCommand();
                cmd.CommandText = @"INSERT INTO menu (key, name, price)
                                    VALUES (@k, @n, @p)
                                    ON CONFLICT (key) DO UPDATE
                                    SET name=EXCLUDED.name, price=EXCLUDED.price;";
                cmd.Parameters.AddWithValue("k", key);
                cmd.Parameters.AddWithValue("n", name);
                cmd.Parameters.AddWithValue("p", price);
                cmd.ExecuteNonQuery();

                session.LastMenuItem = key;

                await botClient.SendTextMessageAsync(
                    userId,
                    $"‚úÖ –ù–∞–ø–∏—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {name} ‚Äî {price} –≥—Ä–Ω",
                    replyMarkup: GetAdminMenu(),
                    cancellationToken: cancellationToken
                );
                return;
            }
        }
        else if (update.CallbackQuery is { } query)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
            await HandleCallbackQueryAsync(botClient, query, cancellationToken);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    static async Task HandleCallbackQueryAsync(ITelegramBotClient botClient, CallbackQuery query, CancellationToken cancellationToken)
    {
        long userId = query.Message!.Chat.Id;
        if (!Sessions.ContainsKey(userId))
            Sessions[userId] = new UserSession();
        var session = Sessions[userId];

        // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
        await botClient.AnswerCallbackQueryAsync(query.Id, cancellationToken: cancellationToken);

        // –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞
        switch (query.Data)
        {
            case "choose_coffee":
                // –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ
                await botClient.SendTextMessageAsync(
                    userId,
                    "‚òï –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:",
                    replyMarkup: GetCoffeeMenu(),
                    cancellationToken: cancellationToken
                );
                break;

            case var data when data.StartsWith("order_"):
                // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á –∫–æ—Ñ–µ
                var coffeeKey = data.Split("_", 2)[1];
                // –°–ø—Ä–æ—Å–∏–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                session.SelectedCoffee = coffeeKey;
                await botClient.SendTextMessageAsync(
                    userId,
                    $"–í—ã –≤—ã–±—Ä–∞–ª–∏: {GetMenu()[coffeeKey].Name} ( {GetMenu()[coffeeKey].Price} –≥—Ä–Ω )\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                    replyMarkup: GetPaymentMenu(),
                    cancellationToken: cancellationToken
                );
                break;

            case "stats":
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                string today = DateTime.UtcNow.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                int total = 0;
                string statText = $"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today}:\n";

                using (var conn = new NpgsqlConnection(ConvertDatabaseUrlToConnectionString(DatabaseUrl!)))
                {
                    conn.Open();
                    using var cmd = conn.CreateCommand();
                    cmd.CommandText = "SELECT coffee_key, payment, count, revenue FROM stats WHERE date=@d";
                    cmd.Parameters.AddWithValue("d", today);
                    using var reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        var ck = reader.GetString(0);
                        var pm = reader.GetString(1);
                        var ct = reader.GetInt32(2);
                        var rev = reader.GetInt32(3);

                        var menu = GetMenu();
                        string coffeeName = menu.ContainsKey(ck) ? menu[ck].Name : ck;
                        string payName = pm == "cash" ? "–ù–∞–ª–∏—á–Ω—ã–µ" : "–ö–∞—Ä—Ç–∞";

                        statText += $"\n‚òï {coffeeName} ({payName}) ‚Äî {ct} —à—Ç. (–í—ã—Ä—É—á–∫–∞: {rev} –≥—Ä–Ω)";
                        total += rev;
                    }
                }

                statText += $"\n\nüí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total} –≥—Ä–Ω";

                await botClient.SendTextMessageAsync(
                    userId,
                    statText,
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken
                );
                break;

            case "enter_password":
                session.AwaitingPassword = true;
                await botClient.SendTextMessageAsync(
                    userId,
                    "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                    cancellationToken: cancellationToken
                );
                break;

            case "add_coffee":
                session.AwaitingNewCoffee = true;
                await botClient.SendTextMessageAsync(
                    userId,
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É (–ù–∞–ø–∏—Ç–æ–∫ - –¶–µ–Ω–∞)",
                    cancellationToken: cancellationToken
                );
                break;

            case "back_main":
                await botClient.SendTextMessageAsync(
                    userId,
                    "üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken
                );
                break;

            // –û–ø–ª–∞—Ç–∞
            case "pay_cash":
            case "pay_card":
                if (session.SelectedCoffee == null)
                {
                    await botClient.SendTextMessageAsync(
                        userId,
                        "‚õî –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ —Å–Ω–∞—á–∞–ª–∞!",
                        cancellationToken: cancellationToken
                    );
                    return;
                }
                var coffee = GetMenu()[session.SelectedCoffee];
                var payment = query.Data == "pay_cash" ? "cash" : "card";
                var price = coffee.Price;
                var dateStr = DateTime.UtcNow.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ stats
                using (var conn = new NpgsqlConnection(ConvertDatabaseUrlToConnectionString(DatabaseUrl!)))
                {
                    conn.Open();
                    using var cmd = conn.CreateCommand();
                    cmd.CommandText = @"
                        INSERT INTO stats (date, coffee_key, payment, count, revenue)
                        VALUES (@d, @k, @pm, 1, @r)
                        ON CONFLICT (date, coffee_key, payment) DO UPDATE
                        SET count = stats.count + 1,
                            revenue = stats.revenue + EXCLUDED.revenue;
                    ";
                    cmd.Parameters.AddWithValue("d", dateStr);
                    cmd.Parameters.AddWithValue("k", session.SelectedCoffee);
                    cmd.Parameters.AddWithValue("pm", payment);
                    cmd.Parameters.AddWithValue("r", price);
                    cmd.ExecuteNonQuery();
                }

                await botClient.SendTextMessageAsync(
                    userId,
                    $"‚òï –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω: {coffee.Name}, –æ–ø–ª–∞—Ç–∞: {(payment == "cash" ? "–ù–∞–ª–∏—á–Ω—ã–µ" : "–ö–∞—Ä—Ç–∞")}",
                    replyMarkup: GetMainMenu(),
                    cancellationToken: cancellationToken
                );
                session.SelectedCoffee = null;
                break;

            default:
                await botClient.SendTextMessageAsync(
                    userId,
                    "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
                    cancellationToken: cancellationToken
                );
                break;
        }
    }

    static Task HandleErrorAsync(ITelegramBotClient botClient, Exception ex, CancellationToken cancellationToken)
    {
        Console.WriteLine($"[Error] {ex.Message}");
        return Task.CompletedTask;
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    static InlineKeyboardMarkup GetMainMenu() =>
        new InlineKeyboardMarkup(
            new[] {
                new[] { InlineKeyboardButton.WithCallbackData("‚òï –í—ã–±—Ä–∞—Ç—å –∫–æ—Ñ–µ", "choose_coffee") },
                new[] { InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–µ–≥–æ–¥–Ω—è)", "stats") },
                new[] { InlineKeyboardButton.WithCallbackData("üîß –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å (–∞–¥–º–∏–Ω)", "enter_password") }
            }
        );

    // –ê–¥–º–∏–Ω-–º–µ–Ω—é
    static InlineKeyboardMarkup GetAdminMenu() =>
        new InlineKeyboardMarkup(
            new[] {
                new[] { InlineKeyboardButton.WithCallbackData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", "add_coffee") },
                new[] { InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "back_main") }
            }
        );

    // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ—Ñ–µ (–∏–∑ –ë–î)
    static InlineKeyboardMarkup GetCoffeeMenu()
    {
        var menu = GetMenu();
        var rows = new List<InlineKeyboardButton[]>();
        foreach (var (key, (Name, Price)) in menu)
        {
            string btnText = $"{Name} ({Price} –≥—Ä–Ω)";
            rows.Add(new[] {
                InlineKeyboardButton.WithCallbackData(btnText, $"order_{key}")
            });
        }
        rows.Add(new[] { InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "back_main") });
        return new InlineKeyboardMarkup(rows);
    }

    // –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã
    static InlineKeyboardMarkup GetPaymentMenu() =>
        new InlineKeyboardMarkup(
            new[] {
                new[] { InlineKeyboardButton.WithCallbackData("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "pay_cash"), InlineKeyboardButton.WithCallbackData("üí≥ –ö–∞—Ä—Ç–∞", "pay_card") },
                new[] { InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "choose_coffee") }
            }
        );

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –∏–∑ –ë–î
    static Dictionary<string, (string Name, int Price)> GetMenu()
    {
        var result = new Dictionary<string, (string, int)>();
        using var conn = new NpgsqlConnection(ConvertDatabaseUrlToConnectionString(DatabaseUrl!));
        conn.Open();
        using var cmd = conn.CreateCommand();
        cmd.CommandText = "SELECT key, name, price FROM menu";
        using var reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            string k = reader.GetString(0);
            string n = reader.GetString(1);
            int p = reader.GetInt32(2);
            result[k] = (n, p);
        }
        return result;
    }
}

// –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —á—Ç–æ –º—ã –æ—Ç –Ω–µ–≥–æ –∂–¥—ë–º?
class UserSession
{
    public bool AwaitingPassword { get; set; } = false;
    public bool AwaitingNewCoffee { get; set; } = false;
    public string? SelectedCoffee { get; set; }
    public (string date, string coffeeKey, string payment, int price)? LastOrder { get; set; }
    public string? LastMenuItem { get; set; }
}
